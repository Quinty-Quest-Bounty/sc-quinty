/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  DisputeResolver,
  DisputeResolverInterface,
} from "../../contracts/DisputeResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_quintyAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "initiatedBy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isExpiryVote",
        type: "bool",
      },
    ],
    name: "DisputeInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "winningSubmissionIds",
        type: "uint256[]",
      },
    ],
    name: "DisputeResolved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "VoteCast",
    type: "event",
  },
  {
    inputs: [],
    name: "DISPUTE_STAKE_BPS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_VOTING_STAKE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTING_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "disputeCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "disputes",
    outputs: [
      {
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "initiatedBy",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isExpiryVote",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "votingEnd",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "resolved",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_disputeId",
        type: "uint256",
      },
    ],
    name: "getDispute",
    outputs: [
      {
        internalType: "uint256",
        name: "bountyId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isExpiryVote",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "votingEnd",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "resolved",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_disputeId",
        type: "uint256",
      },
    ],
    name: "getVoteCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_disputeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_voter",
        type: "address",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bountyId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_slashAmount",
        type: "uint256",
      },
    ],
    name: "initiateExpiryVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bountyId",
        type: "uint256",
      },
    ],
    name: "initiatePengadilanDispute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bountyId",
        type: "uint256",
      },
    ],
    name: "isDisputeActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_disputeId",
        type: "uint256",
      },
    ],
    name: "resolveDispute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_disputeId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "_rankedSubIds",
        type: "uint256[]",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803460d557601f6110e638819003918201601f19168301916001600160401b0383118484101760da5780849260209460405283398101031260d557516001600160a01b0381169081900360d557331560bf5760008054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055600280546001600160a01b031916919091179055610ff590816100f18239f35b631e4fbdf760e01b600052600060045260246000fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816283449914610df5575080631deeca1014610dcc5780634385963214610d765780634faffcc414610a17578063564a565d146109a65780637055d36814610637578063715018a6146105dd5780637d36f4d3146105bf5780638da5cb5b14610598578063965e46cc146103e8578063a438d208146103ca578063b2c2f2e81461039e578063c2b7b868146101ee578063cc2e61b6146101cd578063e3a96cbd1461015e5763f2fde38b146100d057600080fd5b3461015b57602036600319011261015b576004356001600160a01b03811690819003610159576100fe610f96565b80156101455781546001600160a01b03198116821783556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b631e4fbdf760e01b82526004829052602482fd5b505b80fd5b503461015b57602036600319011261015b57604060c091600435815260036020522080549060ff600182015460a01c16906002810154600382015490600460ff6005850154169301549360405195865215156020860152604085015260608401521515608083015260a0820152f35b503461015b578060031936011261015b576020604051655af3107a40008152f35b503461015b57602036600319011261015b5760043560026001541461038f57600260015580825260036020526040822060038101544211156103575760058101805460ff81166103125760019060ff191617905560409081516102518382610e11565b6001815260046020820192601f1985013685370180546102d1575b508251926020840191602085525180925283019190855b8181106102bb5750505090807ffc7e89cd665487a127729bce1ffe2d30367c1ec5a4a78639bddfbee1a645696d920390a26001805580f35b8251845260209384019390920191600101610283565b8054156102fe578552600260208620018054156102fe57855260208520548151156102fe5782523861026c565b634e487b7160e01b86526032600452602486fd5b60405162461bcd60e51b815260206004820152601860248201527f4469737075746520616c7265616479207265736f6c76656400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f159bdd1a5b99c81b9bdd08195b99195960821b6044820152606490fd5b633ee5aeb560e01b8252600482fd5b503461015b57602036600319011261015b57600460406020928235815260038452200154604051908152f35b503461015b578060031936011261015b5760206040516203f4808152f35b503461015b57604036600319011261015b57600254600435906001600160a01b0316330361053d5760249061041e600454610e33565b8060045583526003602052604083208181558360018060a01b03600254166040519485809263370be1d160e21b82528660048301525afa928315610532578493610508575b506001810180546001600160a81b031981166001600160a01b03909516948517600160a01b1790915560243560028301556001600160a01b03191690921791426203f4808101919082106104f45760030155600454604051600181526001600160a01b03909316927f1251a539074b7bd64e0683f340035d4f2283723974ee4e6beb16c943ba4eea4690602090a480f35b634e487b7160e01b85526011600452602485fd5b6105259193503d8086833e61051d8183610e11565b810190610ebc565b5050505050509138610463565b6040513d86823e3d90fd5b60405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79205175696e747920636f6e74726163742063616e20696e697469617460448201526c652065787069727920766f746560981b6064820152608490fd5b503461015b578060031936011261015b57546040516001600160a01b039091168152602090f35b503461015b578060031936011261015b576020600454604051908152f35b503461015b578060031936011261015b576105f6610f96565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50604036600319011261015b5760043560243567ffffffffffffffff81116109a257366023820112156109a25780600401359067ffffffffffffffff821161087a578160051b602081019261068f6040519485610e11565b8352602460208401918301019136831161099e57602401905b82821061098e57505050818352600360205260408320906003820154421161095657338452600682016020819052604085205490929060ff1661092157655af3107a400034106108e75760038251036108a257600401936040516060810181811067ffffffffffffffff82111761088e576040523381526020810190348252604081019384528654600160401b81101561087a5760018101808955811015610866579683526020909220915160039690960290910180546001600160a01b0319166001600160a01b039690961695909517855551600185015551805192939192916002019067ffffffffffffffff831161085057600160401b8311610850578154838355808410610827575b5060200190600052602060002060005b838110610813573360008181526020878152604091829020805460ff19166001179055905134815288917f2acce567deca3aabf56327adbb4524bd5318936eaefa69e3a5208ffda0cfec0991a3005b6001906020845194019381840155016107c4565b8260005283602060002091820191015b81811061084457506107b4565b60008155600101610837565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b84526032600452602484fd5b634e487b7160e01b84526041600452602484fd5b634e487b7160e01b83526041600452602483fd5b60405162461bcd60e51b815260206004820152601f60248201527f4d7573742072616e6b2065786163746c792033207375626d697373696f6e73006044820152606490fd5b60405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e74207374616b6560701b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f159bdd1a5b99c81a185cc8195b99195960821b6044820152606490fd5b81358152602091820191016106a8565b8580fd5b8280fd5b503461015b57602036600319011261015b57604060c0916004358152600360205220805490600181015490600281015460ff8060056003850154940154169360405195865260018060a01b038116602087015260a01c161515604085015260608401526080830152151560a0820152f35b50602036600319011261015b5760025460405163370be1d160e21b815260048035908201819052918390829060249082906001600160a01b03165afa8015610d6b57839084928591610d45575b506005811015610d3157600103610cdb576001600160a01b03163303610c7a576004549060015b82811115610be857506103e881028181046103e814821517156104f457612710900491823410610b9757610abe90610e33565b600481905584526003602052604084208381556001810180546001600160a81b0319163360ff60a01b191617905560028101919091556203f48042908101919082106104f45760030155803411610b45575b5060045490604051918383527f1251a539074b7bd64e0683f340035d4f2283723974ee4e6beb16c943ba4eea4660203394a480f35b80340390348211610b835783808093819382903414610b7a575b3390f115610b6d5738610b10565b50604051903d90823e3d90fd5b506108fc610b5f565b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b815260206004820152602360248201527f496e73756666696369656e74207374616b6520746f207261697365206469737060448201526275746560e81b6064820152608490fd5b80855260036020528360408620541480610c60575b610c0f57610c0a90610e33565b610a8b565b60405162461bcd60e51b8152602060048201526024808201527f426f756e747920616c72656164792068617320616e20616374697665206469736044820152637075746560e01b6064820152608490fd5b50808552600360205260ff60056040872001541615610bfd565b60405162461bcd60e51b815260206004820152603360248201527f4f6e6c7920626f756e74792063726561746f722063616e20696e6974696174656044820152722070656e676164696c616e206469737075746560681b6064820152608490fd5b60405162461bcd60e51b815260206004820152602860248201527f44697370757465206f6e6c7920666f7220626f756e746965732070656e64696e60448201526719c81c995d99585b60c21b6064820152608490fd5b634e487b7160e01b85526021600452602485fd5b915050610d5c91503d8085833e61051d8183610e11565b50949293505050909138610a64565b6040513d85823e3d90fd5b503461015b57604036600319011261015b576024356001600160a01b038116810361015957604060209260ff926004358252600385526006838320019060018060a01b0316825284522054166040519015158152f35b503461015b57602036600319011261015b576020610deb600435610e58565b6040519015158152f35b905034610159578160031936011261015957806103e860209252f35b90601f8019910116810190811067ffffffffffffffff82111761085057604052565b6000198114610e425760010190565b634e487b7160e01b600052601160045260246000fd5b6004549060015b82811115610e6f57505050600090565b806000526003602052816040600020541480610ea0575b610e9857610e9390610e33565b610e5f565b505050600190565b5080600052600360205260ff6005604060002001541615610e86565b909160e082840312610f7c5781516001600160a01b0381168103610f7c5792602083015167ffffffffffffffff8111610f7c57830181601f82011215610f7c5780519067ffffffffffffffff82116108505760405192610f26601f8401601f191660200185610e11565b82845260208383010111610f7c5760005b828110610f815750506020600091830101529160408101519160608201519160808101518015158103610f7c579160a08201516005811015610f7c5760c09092015190565b600080fd5b80602080928401015182828701015201610f37565b6000546001600160a01b03163303610faa57565b63118cdaa760e01b6000523360045260246000fdfea26469706673582212201797f66bcaf94a85de57f05a7fa367d96e4ba352d1fa560b2b6ff442c664ff0264736f6c634300081c0033";

type DisputeResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DisputeResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DisputeResolver__factory extends ContractFactory {
  constructor(...args: DisputeResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _quintyAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_quintyAddress, overrides || {});
  }
  override deploy(
    _quintyAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_quintyAddress, overrides || {}) as Promise<
      DisputeResolver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DisputeResolver__factory {
    return super.connect(runner) as DisputeResolver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DisputeResolverInterface {
    return new Interface(_abi) as DisputeResolverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DisputeResolver {
    return new Contract(address, _abi, runner) as unknown as DisputeResolver;
  }
}
