/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface QuintyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReply"
      | "bounties"
      | "bountyCounter"
      | "createBounty"
      | "disputeAddress"
      | "getBounty"
      | "getSubmission"
      | "getSubmissionCount"
      | "owner"
      | "renounceOwnership"
      | "reputationAddress"
      | "revealSolution"
      | "selectWinners"
      | "setAddresses"
      | "submissions"
      | "submitSolution"
      | "transferOwnership"
      | "triggerSlash"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BountyCreated"
      | "BountyResolved"
      | "BountySlashed"
      | "OwnershipTransferred"
      | "ReplyAdded"
      | "SolutionRevealed"
      | "SubmissionCreated"
      | "WinnerSelected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addReply",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bounties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bountyCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBounty",
    values: [string, BigNumberish, boolean, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBounty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmission",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealSolution",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "selectWinners",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSolution",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerSlash",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addReply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bounties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bountyCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBounty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerSlash",
    data: BytesLike
  ): Result;
}

export namespace BountyCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    amount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    creator: string,
    amount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    id: bigint;
    creator: string;
    amount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BountyResolvedEvent {
  export type InputTuple = [
    id: BigNumberish,
    winners: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [id: bigint, winners: string[], amounts: bigint[]];
  export interface OutputObject {
    id: bigint;
    winners: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BountySlashedEvent {
  export type InputTuple = [id: BigNumberish, slashAmount: BigNumberish];
  export type OutputTuple = [id: bigint, slashAmount: bigint];
  export interface OutputObject {
    id: bigint;
    slashAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReplyAddedEvent {
  export type InputTuple = [
    bountyId: BigNumberish,
    subId: BigNumberish,
    replier: AddressLike,
    reply: string
  ];
  export type OutputTuple = [
    bountyId: bigint,
    subId: bigint,
    replier: string,
    reply: string
  ];
  export interface OutputObject {
    bountyId: bigint;
    subId: bigint;
    replier: string;
    reply: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SolutionRevealedEvent {
  export type InputTuple = [
    bountyId: BigNumberish,
    subId: BigNumberish,
    revealIpfsCid: string
  ];
  export type OutputTuple = [
    bountyId: bigint,
    subId: bigint,
    revealIpfsCid: string
  ];
  export interface OutputObject {
    bountyId: bigint;
    subId: bigint;
    revealIpfsCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionCreatedEvent {
  export type InputTuple = [
    bountyId: BigNumberish,
    subId: BigNumberish,
    solver: AddressLike,
    ipfsCid: string
  ];
  export type OutputTuple = [
    bountyId: bigint,
    subId: bigint,
    solver: string,
    ipfsCid: string
  ];
  export interface OutputObject {
    bountyId: bigint;
    subId: bigint;
    solver: string;
    ipfsCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerSelectedEvent {
  export type InputTuple = [id: BigNumberish, winners: AddressLike[]];
  export type OutputTuple = [id: bigint, winners: string[]];
  export interface OutputObject {
    id: bigint;
    winners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Quinty extends BaseContract {
  connect(runner?: ContractRunner | null): Quinty;
  waitForDeployment(): Promise<this>;

  interface: QuintyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReply: TypedContractMethod<
    [_bountyId: BigNumberish, _subId: BigNumberish, _reply: string],
    [void],
    "nonpayable"
  >;

  bounties: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, boolean, bigint, boolean] & {
        creator: string;
        description: string;
        amount: bigint;
        deadline: bigint;
        allowMultipleWinners: boolean;
        resolved: boolean;
        slashPercent: bigint;
        slashed: boolean;
      }
    ],
    "view"
  >;

  bountyCounter: TypedContractMethod<[], [bigint], "view">;

  createBounty: TypedContractMethod<
    [
      _description: string,
      _deadline: BigNumberish,
      _allowMultipleWinners: boolean,
      _winnerShares: BigNumberish[],
      _slashPercent: BigNumberish
    ],
    [void],
    "payable"
  >;

  disputeAddress: TypedContractMethod<[], [string], "view">;

  getBounty: TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint[],
        boolean,
        bigint,
        string[],
        boolean
      ] & {
        creator: string;
        description: string;
        amount: bigint;
        deadline: bigint;
        allowMultipleWinners: boolean;
        winnerShares: bigint[];
        resolved: boolean;
        slashPercent: bigint;
        winners: string[];
        slashed: boolean;
      }
    ],
    "view"
  >;

  getSubmission: TypedContractMethod<
    [_bountyId: BigNumberish, _subId: BigNumberish],
    [
      [bigint, string, string, bigint, string[], string, bigint] & {
        bountyId: bigint;
        solver: string;
        blindedIpfsCid: string;
        deposit: bigint;
        replies: string[];
        revealIpfsCid: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getSubmissionCount: TypedContractMethod<
    [_bountyId: BigNumberish],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationAddress: TypedContractMethod<[], [string], "view">;

  revealSolution: TypedContractMethod<
    [_bountyId: BigNumberish, _subId: BigNumberish, _revealIpfsCid: string],
    [void],
    "nonpayable"
  >;

  selectWinners: TypedContractMethod<
    [
      _id: BigNumberish,
      _winners: AddressLike[],
      _submissionIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setAddresses: TypedContractMethod<
    [_repAddress: AddressLike, _disputeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  submissions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, string, bigint] & {
        bountyId: bigint;
        solver: string;
        blindedIpfsCid: string;
        deposit: bigint;
        revealIpfsCid: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  submitSolution: TypedContractMethod<
    [_bountyId: BigNumberish, _blindedIpfsCid: string],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  triggerSlash: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReply"
  ): TypedContractMethod<
    [_bountyId: BigNumberish, _subId: BigNumberish, _reply: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bounties"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, boolean, bigint, boolean] & {
        creator: string;
        description: string;
        amount: bigint;
        deadline: bigint;
        allowMultipleWinners: boolean;
        resolved: boolean;
        slashPercent: bigint;
        slashed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bountyCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createBounty"
  ): TypedContractMethod<
    [
      _description: string,
      _deadline: BigNumberish,
      _allowMultipleWinners: boolean,
      _winnerShares: BigNumberish[],
      _slashPercent: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "disputeAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBounty"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint[],
        boolean,
        bigint,
        string[],
        boolean
      ] & {
        creator: string;
        description: string;
        amount: bigint;
        deadline: bigint;
        allowMultipleWinners: boolean;
        winnerShares: bigint[];
        resolved: boolean;
        slashPercent: bigint;
        winners: string[];
        slashed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubmission"
  ): TypedContractMethod<
    [_bountyId: BigNumberish, _subId: BigNumberish],
    [
      [bigint, string, string, bigint, string[], string, bigint] & {
        bountyId: bigint;
        solver: string;
        blindedIpfsCid: string;
        deposit: bigint;
        replies: string[];
        revealIpfsCid: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubmissionCount"
  ): TypedContractMethod<[_bountyId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revealSolution"
  ): TypedContractMethod<
    [_bountyId: BigNumberish, _subId: BigNumberish, _revealIpfsCid: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectWinners"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _winners: AddressLike[],
      _submissionIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [_repAddress: AddressLike, _disputeAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, string, bigint] & {
        bountyId: bigint;
        solver: string;
        blindedIpfsCid: string;
        deposit: bigint;
        revealIpfsCid: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitSolution"
  ): TypedContractMethod<
    [_bountyId: BigNumberish, _blindedIpfsCid: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerSlash"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BountyCreated"
  ): TypedContractEvent<
    BountyCreatedEvent.InputTuple,
    BountyCreatedEvent.OutputTuple,
    BountyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BountyResolved"
  ): TypedContractEvent<
    BountyResolvedEvent.InputTuple,
    BountyResolvedEvent.OutputTuple,
    BountyResolvedEvent.OutputObject
  >;
  getEvent(
    key: "BountySlashed"
  ): TypedContractEvent<
    BountySlashedEvent.InputTuple,
    BountySlashedEvent.OutputTuple,
    BountySlashedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReplyAdded"
  ): TypedContractEvent<
    ReplyAddedEvent.InputTuple,
    ReplyAddedEvent.OutputTuple,
    ReplyAddedEvent.OutputObject
  >;
  getEvent(
    key: "SolutionRevealed"
  ): TypedContractEvent<
    SolutionRevealedEvent.InputTuple,
    SolutionRevealedEvent.OutputTuple,
    SolutionRevealedEvent.OutputObject
  >;
  getEvent(
    key: "SubmissionCreated"
  ): TypedContractEvent<
    SubmissionCreatedEvent.InputTuple,
    SubmissionCreatedEvent.OutputTuple,
    SubmissionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerSelected"
  ): TypedContractEvent<
    WinnerSelectedEvent.InputTuple,
    WinnerSelectedEvent.OutputTuple,
    WinnerSelectedEvent.OutputObject
  >;

  filters: {
    "BountyCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      BountyCreatedEvent.InputTuple,
      BountyCreatedEvent.OutputTuple,
      BountyCreatedEvent.OutputObject
    >;
    BountyCreated: TypedContractEvent<
      BountyCreatedEvent.InputTuple,
      BountyCreatedEvent.OutputTuple,
      BountyCreatedEvent.OutputObject
    >;

    "BountyResolved(uint256,address[],uint256[])": TypedContractEvent<
      BountyResolvedEvent.InputTuple,
      BountyResolvedEvent.OutputTuple,
      BountyResolvedEvent.OutputObject
    >;
    BountyResolved: TypedContractEvent<
      BountyResolvedEvent.InputTuple,
      BountyResolvedEvent.OutputTuple,
      BountyResolvedEvent.OutputObject
    >;

    "BountySlashed(uint256,uint256)": TypedContractEvent<
      BountySlashedEvent.InputTuple,
      BountySlashedEvent.OutputTuple,
      BountySlashedEvent.OutputObject
    >;
    BountySlashed: TypedContractEvent<
      BountySlashedEvent.InputTuple,
      BountySlashedEvent.OutputTuple,
      BountySlashedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReplyAdded(uint256,uint256,address,string)": TypedContractEvent<
      ReplyAddedEvent.InputTuple,
      ReplyAddedEvent.OutputTuple,
      ReplyAddedEvent.OutputObject
    >;
    ReplyAdded: TypedContractEvent<
      ReplyAddedEvent.InputTuple,
      ReplyAddedEvent.OutputTuple,
      ReplyAddedEvent.OutputObject
    >;

    "SolutionRevealed(uint256,uint256,string)": TypedContractEvent<
      SolutionRevealedEvent.InputTuple,
      SolutionRevealedEvent.OutputTuple,
      SolutionRevealedEvent.OutputObject
    >;
    SolutionRevealed: TypedContractEvent<
      SolutionRevealedEvent.InputTuple,
      SolutionRevealedEvent.OutputTuple,
      SolutionRevealedEvent.OutputObject
    >;

    "SubmissionCreated(uint256,uint256,address,string)": TypedContractEvent<
      SubmissionCreatedEvent.InputTuple,
      SubmissionCreatedEvent.OutputTuple,
      SubmissionCreatedEvent.OutputObject
    >;
    SubmissionCreated: TypedContractEvent<
      SubmissionCreatedEvent.InputTuple,
      SubmissionCreatedEvent.OutputTuple,
      SubmissionCreatedEvent.OutputObject
    >;

    "WinnerSelected(uint256,address[])": TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
    WinnerSelected: TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
  };
}
