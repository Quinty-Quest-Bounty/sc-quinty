/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IQuintyInterface extends Interface {
  getFunction(
    nameOrSignature: "getBounty" | "getSubmission" | "getSubmissionCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBounty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmission",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionCount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getBounty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionCount",
    data: BytesLike
  ): Result;
}

export interface IQuinty extends BaseContract {
  connect(runner?: ContractRunner | null): IQuinty;
  waitForDeployment(): Promise<this>;

  interface: IQuintyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBounty: TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint[],
        boolean,
        bigint,
        string[],
        boolean
      ] & {
        creator: string;
        description: string;
        amount: bigint;
        deadline: bigint;
        allowMultipleWinners: boolean;
        winnerShares: bigint[];
        resolved: boolean;
        slashPercent: bigint;
        winners: string[];
        slashed: boolean;
      }
    ],
    "view"
  >;

  getSubmission: TypedContractMethod<
    [_bountyId: BigNumberish, _subId: BigNumberish],
    [
      [bigint, string, string, bigint, string[], string, bigint] & {
        bountyId: bigint;
        solver: string;
        blindedIpfsCid: string;
        deposit: bigint;
        replies: string[];
        revealIpfsCid: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getSubmissionCount: TypedContractMethod<
    [_bountyId: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBounty"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint[],
        boolean,
        bigint,
        string[],
        boolean
      ] & {
        creator: string;
        description: string;
        amount: bigint;
        deadline: bigint;
        allowMultipleWinners: boolean;
        winnerShares: bigint[];
        resolved: boolean;
        slashPercent: bigint;
        winners: string[];
        slashed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubmission"
  ): TypedContractMethod<
    [_bountyId: BigNumberish, _subId: BigNumberish],
    [
      [bigint, string, string, bigint, string[], string, bigint] & {
        bountyId: bigint;
        solver: string;
        blindedIpfsCid: string;
        deposit: bigint;
        replies: string[];
        revealIpfsCid: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubmissionCount"
  ): TypedContractMethod<[_bountyId: BigNumberish], [bigint], "view">;

  filters: {};
}
