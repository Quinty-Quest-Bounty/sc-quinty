/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace QuintyAchievements {
  export type SeasonStatsStruct = {
    submissions: BigNumberish;
    wins: BigNumberish;
    bountiesCreated: BigNumberish;
    lastActivity: BigNumberish;
  };

  export type SeasonStatsStructOutput = [
    submissions: bigint,
    wins: bigint,
    bountiesCreated: bigint,
    lastActivity: bigint
  ] & {
    submissions: bigint;
    wins: bigint;
    bountiesCreated: bigint;
    lastActivity: bigint;
  };
}

export interface QuintyAchievementsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MONTH_DURATION"
      | "QUARTER_DURATION"
      | "achievementTokenIds"
      | "approve"
      | "balanceOf"
      | "creatorMilestones"
      | "currentSeasonId"
      | "getApproved"
      | "getCurrentSeasonLeaderboard"
      | "getUserAchievements"
      | "getUserSeasonStats"
      | "hasAchievement"
      | "isApprovedForAll"
      | "name"
      | "owner"
      | "ownerOf"
      | "recordBountyCreation"
      | "recordSubmission"
      | "recordWin"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "seasonStats"
      | "seasons"
      | "setApprovalForAll"
      | "setBaseTokenURI"
      | "solverMilestones"
      | "supportsInterface"
      | "symbol"
      | "tokenCounter"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "userStats"
      | "winnerMilestones"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AchievementUnlocked"
      | "Approval"
      | "ApprovalForAll"
      | "OwnershipTransferred"
      | "SeasonEnded"
      | "SeasonStarted"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MONTH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUARTER_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "achievementTokenIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorMilestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentSeasonId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSeasonLeaderboard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAchievements",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSeasonStats",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAchievement",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordBountyCreation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordSubmission",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordWin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seasonStats",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "seasons",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "solverMilestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "winnerMilestones",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MONTH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUARTER_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "achievementTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSeasonId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSeasonLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSeasonStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAchievement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordBountyCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recordWin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seasonStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seasons", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solverMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winnerMilestones",
    data: BytesLike
  ): Result;
}

export namespace AchievementUnlockedEvent {
  export type InputTuple = [
    user: AddressLike,
    achievement: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    achievement: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    user: string;
    achievement: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeasonEndedEvent {
  export type InputTuple = [
    seasonId: BigNumberish,
    topSolver: AddressLike,
    topCreator: AddressLike
  ];
  export type OutputTuple = [
    seasonId: bigint,
    topSolver: string,
    topCreator: string
  ];
  export interface OutputObject {
    seasonId: bigint;
    topSolver: string;
    topCreator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeasonStartedEvent {
  export type InputTuple = [
    seasonId: BigNumberish,
    seasonType: BigNumberish,
    startTime: BigNumberish
  ];
  export type OutputTuple = [
    seasonId: bigint,
    seasonType: bigint,
    startTime: bigint
  ];
  export interface OutputObject {
    seasonId: bigint;
    seasonType: bigint;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuintyAchievements extends BaseContract {
  connect(runner?: ContractRunner | null): QuintyAchievements;
  waitForDeployment(): Promise<this>;

  interface: QuintyAchievementsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MONTH_DURATION: TypedContractMethod<[], [bigint], "view">;

  QUARTER_DURATION: TypedContractMethod<[], [bigint], "view">;

  achievementTokenIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  creatorMilestones: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  currentSeasonId: TypedContractMethod<[], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getCurrentSeasonLeaderboard: TypedContractMethod<
    [],
    [
      [string, bigint, string, bigint, bigint] & {
        topSolver: string;
        topSolverWins: bigint;
        topCreator: string;
        topCreatorBounties: bigint;
        seasonEndTime: bigint;
      }
    ],
    "view"
  >;

  getUserAchievements: TypedContractMethod<
    [_user: AddressLike],
    [[bigint[], bigint[]] & { achievements: bigint[]; tokenIds: bigint[] }],
    "view"
  >;

  getUserSeasonStats: TypedContractMethod<
    [_user: AddressLike, _seasonId: BigNumberish],
    [QuintyAchievements.SeasonStatsStructOutput],
    "view"
  >;

  hasAchievement: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  recordBountyCreation: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  recordSubmission: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  recordWin: TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  seasonStats: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        submissions: bigint;
        wins: bigint;
        bountiesCreated: bigint;
        lastActivity: bigint;
      }
    ],
    "view"
  >;

  seasons: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        string,
        bigint,
        bigint
      ] & {
        seasonId: bigint;
        startTime: bigint;
        endTime: bigint;
        seasonType: bigint;
        ended: boolean;
        topSolver: string;
        topCreator: string;
        topSolverWins: bigint;
        topCreatorBounties: bigint;
      }
    ],
    "view"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseTokenURI: TypedContractMethod<
    [baseTokenURI: string],
    [void],
    "nonpayable"
  >;

  solverMilestones: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenCounter: TypedContractMethod<[], [bigint], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userStats: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalSubmissions: bigint;
        totalWins: bigint;
        totalBountiesCreated: bigint;
        firstActivity: bigint;
      }
    ],
    "view"
  >;

  winnerMilestones: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MONTH_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUARTER_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "achievementTokenIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creatorMilestones"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentSeasonId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentSeasonLeaderboard"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, string, bigint, bigint] & {
        topSolver: string;
        topSolverWins: bigint;
        topCreator: string;
        topCreatorBounties: bigint;
        seasonEndTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAchievements"
  ): TypedContractMethod<
    [_user: AddressLike],
    [[bigint[], bigint[]] & { achievements: bigint[]; tokenIds: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserSeasonStats"
  ): TypedContractMethod<
    [_user: AddressLike, _seasonId: BigNumberish],
    [QuintyAchievements.SeasonStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAchievement"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "recordBountyCreation"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recordSubmission"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recordWin"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seasonStats"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        submissions: bigint;
        wins: bigint;
        bountiesCreated: bigint;
        lastActivity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "seasons"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        string,
        bigint,
        bigint
      ] & {
        seasonId: bigint;
        startTime: bigint;
        endTime: bigint;
        seasonType: bigint;
        ended: boolean;
        topSolver: string;
        topCreator: string;
        topSolverWins: bigint;
        topCreatorBounties: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseTokenURI"
  ): TypedContractMethod<[baseTokenURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "solverMilestones"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userStats"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        totalSubmissions: bigint;
        totalWins: bigint;
        totalBountiesCreated: bigint;
        firstActivity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "winnerMilestones"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "AchievementUnlocked"
  ): TypedContractEvent<
    AchievementUnlockedEvent.InputTuple,
    AchievementUnlockedEvent.OutputTuple,
    AchievementUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SeasonEnded"
  ): TypedContractEvent<
    SeasonEndedEvent.InputTuple,
    SeasonEndedEvent.OutputTuple,
    SeasonEndedEvent.OutputObject
  >;
  getEvent(
    key: "SeasonStarted"
  ): TypedContractEvent<
    SeasonStartedEvent.InputTuple,
    SeasonStartedEvent.OutputTuple,
    SeasonStartedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AchievementUnlocked(address,uint8,uint256)": TypedContractEvent<
      AchievementUnlockedEvent.InputTuple,
      AchievementUnlockedEvent.OutputTuple,
      AchievementUnlockedEvent.OutputObject
    >;
    AchievementUnlocked: TypedContractEvent<
      AchievementUnlockedEvent.InputTuple,
      AchievementUnlockedEvent.OutputTuple,
      AchievementUnlockedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SeasonEnded(uint256,address,address)": TypedContractEvent<
      SeasonEndedEvent.InputTuple,
      SeasonEndedEvent.OutputTuple,
      SeasonEndedEvent.OutputObject
    >;
    SeasonEnded: TypedContractEvent<
      SeasonEndedEvent.InputTuple,
      SeasonEndedEvent.OutputTuple,
      SeasonEndedEvent.OutputObject
    >;

    "SeasonStarted(uint256,uint8,uint256)": TypedContractEvent<
      SeasonStartedEvent.InputTuple,
      SeasonStartedEvent.OutputTuple,
      SeasonStartedEvent.OutputObject
    >;
    SeasonStarted: TypedContractEvent<
      SeasonStartedEvent.InputTuple,
      SeasonStartedEvent.OutputTuple,
      SeasonStartedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
