/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AirdropBountyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVerifier"
      | "airdropCounter"
      | "airdrops"
      | "cancelAirdrop"
      | "createAirdrop"
      | "entries"
      | "finalizeAirdrop"
      | "getAirdrop"
      | "getAirdropStats"
      | "getEntry"
      | "getEntryCount"
      | "getUserSubmission"
      | "hasSubmitted"
      | "isVerifier"
      | "owner"
      | "removeVerifier"
      | "renounceOwnership"
      | "submitEntry"
      | "transferOwnership"
      | "userSubmissionIndex"
      | "verifierApprovals"
      | "verifiers"
      | "verifyEntry"
      | "verifyMultipleEntries"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropCancelled"
      | "AirdropCreated"
      | "EntrySubmitted"
      | "EntryVerified"
      | "OwnershipTransferred"
      | "QualifiedAndDistributed"
      | "VerifierAdded"
      | "VerifierRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdrops",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAirdrop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAirdrop",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "entries",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAirdrop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdrop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubmission",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubmitted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitEntry",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userSubmissionIndex",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifierApprovals",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyEntry",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMultipleEntries",
    values: [BigNumberish, BigNumberish[], BigNumberish[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "airdrops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAirdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEntry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSubmissionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifierApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMultipleEntries",
    data: BytesLike
  ): Result;
}

export namespace AirdropCancelledEvent {
  export type InputTuple = [id: BigNumberish, refundAmount: BigNumberish];
  export type OutputTuple = [id: bigint, refundAmount: bigint];
  export interface OutputObject {
    id: bigint;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AirdropCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    title: string,
    perQualifier: BigNumberish,
    maxQualifiers: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    creator: string,
    title: string,
    perQualifier: bigint,
    maxQualifiers: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    id: bigint;
    creator: string;
    title: string;
    perQualifier: bigint;
    maxQualifiers: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntrySubmittedEvent {
  export type InputTuple = [
    id: BigNumberish,
    solver: AddressLike,
    ipfsProofCid: string
  ];
  export type OutputTuple = [id: bigint, solver: string, ipfsProofCid: string];
  export interface OutputObject {
    id: bigint;
    solver: string;
    ipfsProofCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntryVerifiedEvent {
  export type InputTuple = [
    airdropId: BigNumberish,
    entryId: BigNumberish,
    verifier: AddressLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    airdropId: bigint,
    entryId: bigint,
    verifier: string,
    status: bigint
  ];
  export interface OutputObject {
    airdropId: bigint;
    entryId: bigint;
    verifier: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QualifiedAndDistributedEvent {
  export type InputTuple = [
    id: BigNumberish,
    qualifiers: AddressLike[],
    totalDistributed: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    qualifiers: string[],
    totalDistributed: bigint
  ];
  export interface OutputObject {
    id: bigint;
    qualifiers: string[];
    totalDistributed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAddedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRemovedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AirdropBounty extends BaseContract {
  connect(runner?: ContractRunner | null): AirdropBounty;
  waitForDeployment(): Promise<this>;

  interface: AirdropBountyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVerifier: TypedContractMethod<
    [_verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  airdropCounter: TypedContractMethod<[], [bigint], "view">;

  airdrops: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        creator: string;
        title: string;
        description: string;
        totalAmount: bigint;
        perQualifier: bigint;
        maxQualifiers: bigint;
        qualifiersCount: bigint;
        deadline: bigint;
        createdAt: bigint;
        resolved: boolean;
        cancelled: boolean;
        requirements: string;
      }
    ],
    "view"
  >;

  cancelAirdrop: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  createAirdrop: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _perQualifier: BigNumberish,
      _maxQualifiers: BigNumberish,
      _deadline: BigNumberish,
      _requirements: string
    ],
    [void],
    "payable"
  >;

  entries: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        solver: string;
        ipfsProofCid: string;
        timestamp: bigint;
        status: bigint;
        feedback: string;
      }
    ],
    "view"
  >;

  finalizeAirdrop: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAirdrop: TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        creator: string;
        title: string;
        description: string;
        totalAmount: bigint;
        perQualifier: bigint;
        maxQualifiers: bigint;
        qualifiersCount: bigint;
        deadline: bigint;
        createdAt: bigint;
        resolved: boolean;
        cancelled: boolean;
        requirements: string;
      }
    ],
    "view"
  >;

  getAirdropStats: TypedContractMethod<
    [_airdropId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalEntries: bigint;
        pendingEntries: bigint;
        approvedEntries: bigint;
        rejectedEntries: bigint;
        remainingSlots: bigint;
      }
    ],
    "view"
  >;

  getEntry: TypedContractMethod<
    [_airdropId: BigNumberish, _entryId: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        solver: string;
        ipfsProofCid: string;
        timestamp: bigint;
        status: bigint;
        feedback: string;
      }
    ],
    "view"
  >;

  getEntryCount: TypedContractMethod<
    [_airdropId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserSubmission: TypedContractMethod<
    [_airdropId: BigNumberish, _user: AddressLike],
    [
      [boolean, bigint, bigint] & {
        hasSubmittedEntry: boolean;
        submissionIndex: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  hasSubmitted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isVerifier: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeVerifier: TypedContractMethod<
    [_verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitEntry: TypedContractMethod<
    [_id: BigNumberish, _ipfsProofCid: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userSubmissionIndex: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  verifierApprovals: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;

  verifiers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  verifyEntry: TypedContractMethod<
    [
      _airdropId: BigNumberish,
      _entryId: BigNumberish,
      _status: BigNumberish,
      _feedback: string
    ],
    [void],
    "nonpayable"
  >;

  verifyMultipleEntries: TypedContractMethod<
    [
      _airdropId: BigNumberish,
      _entryIds: BigNumberish[],
      _statuses: BigNumberish[],
      _feedbacks: string[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVerifier"
  ): TypedContractMethod<[_verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "airdropCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "airdrops"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        creator: string;
        title: string;
        description: string;
        totalAmount: bigint;
        perQualifier: bigint;
        maxQualifiers: bigint;
        qualifiersCount: bigint;
        deadline: bigint;
        createdAt: bigint;
        resolved: boolean;
        cancelled: boolean;
        requirements: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelAirdrop"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAirdrop"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _perQualifier: BigNumberish,
      _maxQualifiers: BigNumberish,
      _deadline: BigNumberish,
      _requirements: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "entries"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        solver: string;
        ipfsProofCid: string;
        timestamp: bigint;
        status: bigint;
        feedback: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "finalizeAirdrop"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAirdrop"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        creator: string;
        title: string;
        description: string;
        totalAmount: bigint;
        perQualifier: bigint;
        maxQualifiers: bigint;
        qualifiersCount: bigint;
        deadline: bigint;
        createdAt: bigint;
        resolved: boolean;
        cancelled: boolean;
        requirements: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAirdropStats"
  ): TypedContractMethod<
    [_airdropId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalEntries: bigint;
        pendingEntries: bigint;
        approvedEntries: bigint;
        rejectedEntries: bigint;
        remainingSlots: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEntry"
  ): TypedContractMethod<
    [_airdropId: BigNumberish, _entryId: BigNumberish],
    [
      [string, string, bigint, bigint, string] & {
        solver: string;
        ipfsProofCid: string;
        timestamp: bigint;
        status: bigint;
        feedback: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEntryCount"
  ): TypedContractMethod<[_airdropId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserSubmission"
  ): TypedContractMethod<
    [_airdropId: BigNumberish, _user: AddressLike],
    [
      [boolean, bigint, bigint] & {
        hasSubmittedEntry: boolean;
        submissionIndex: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasSubmitted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerifier"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[_verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitEntry"
  ): TypedContractMethod<
    [_id: BigNumberish, _ipfsProofCid: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userSubmissionIndex"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifierApprovals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifiers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyEntry"
  ): TypedContractMethod<
    [
      _airdropId: BigNumberish,
      _entryId: BigNumberish,
      _status: BigNumberish,
      _feedback: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyMultipleEntries"
  ): TypedContractMethod<
    [
      _airdropId: BigNumberish,
      _entryIds: BigNumberish[],
      _statuses: BigNumberish[],
      _feedbacks: string[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AirdropCancelled"
  ): TypedContractEvent<
    AirdropCancelledEvent.InputTuple,
    AirdropCancelledEvent.OutputTuple,
    AirdropCancelledEvent.OutputObject
  >;
  getEvent(
    key: "AirdropCreated"
  ): TypedContractEvent<
    AirdropCreatedEvent.InputTuple,
    AirdropCreatedEvent.OutputTuple,
    AirdropCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EntrySubmitted"
  ): TypedContractEvent<
    EntrySubmittedEvent.InputTuple,
    EntrySubmittedEvent.OutputTuple,
    EntrySubmittedEvent.OutputObject
  >;
  getEvent(
    key: "EntryVerified"
  ): TypedContractEvent<
    EntryVerifiedEvent.InputTuple,
    EntryVerifiedEvent.OutputTuple,
    EntryVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "QualifiedAndDistributed"
  ): TypedContractEvent<
    QualifiedAndDistributedEvent.InputTuple,
    QualifiedAndDistributedEvent.OutputTuple,
    QualifiedAndDistributedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAdded"
  ): TypedContractEvent<
    VerifierAddedEvent.InputTuple,
    VerifierAddedEvent.OutputTuple,
    VerifierAddedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRemoved"
  ): TypedContractEvent<
    VerifierRemovedEvent.InputTuple,
    VerifierRemovedEvent.OutputTuple,
    VerifierRemovedEvent.OutputObject
  >;

  filters: {
    "AirdropCancelled(uint256,uint256)": TypedContractEvent<
      AirdropCancelledEvent.InputTuple,
      AirdropCancelledEvent.OutputTuple,
      AirdropCancelledEvent.OutputObject
    >;
    AirdropCancelled: TypedContractEvent<
      AirdropCancelledEvent.InputTuple,
      AirdropCancelledEvent.OutputTuple,
      AirdropCancelledEvent.OutputObject
    >;

    "AirdropCreated(uint256,address,string,uint256,uint256,uint256)": TypedContractEvent<
      AirdropCreatedEvent.InputTuple,
      AirdropCreatedEvent.OutputTuple,
      AirdropCreatedEvent.OutputObject
    >;
    AirdropCreated: TypedContractEvent<
      AirdropCreatedEvent.InputTuple,
      AirdropCreatedEvent.OutputTuple,
      AirdropCreatedEvent.OutputObject
    >;

    "EntrySubmitted(uint256,address,string)": TypedContractEvent<
      EntrySubmittedEvent.InputTuple,
      EntrySubmittedEvent.OutputTuple,
      EntrySubmittedEvent.OutputObject
    >;
    EntrySubmitted: TypedContractEvent<
      EntrySubmittedEvent.InputTuple,
      EntrySubmittedEvent.OutputTuple,
      EntrySubmittedEvent.OutputObject
    >;

    "EntryVerified(uint256,uint256,address,uint8)": TypedContractEvent<
      EntryVerifiedEvent.InputTuple,
      EntryVerifiedEvent.OutputTuple,
      EntryVerifiedEvent.OutputObject
    >;
    EntryVerified: TypedContractEvent<
      EntryVerifiedEvent.InputTuple,
      EntryVerifiedEvent.OutputTuple,
      EntryVerifiedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "QualifiedAndDistributed(uint256,address[],uint256)": TypedContractEvent<
      QualifiedAndDistributedEvent.InputTuple,
      QualifiedAndDistributedEvent.OutputTuple,
      QualifiedAndDistributedEvent.OutputObject
    >;
    QualifiedAndDistributed: TypedContractEvent<
      QualifiedAndDistributedEvent.InputTuple,
      QualifiedAndDistributedEvent.OutputTuple,
      QualifiedAndDistributedEvent.OutputObject
    >;

    "VerifierAdded(address)": TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;
    VerifierAdded: TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;

    "VerifierRemoved(address)": TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
    VerifierRemoved: TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
  };
}
