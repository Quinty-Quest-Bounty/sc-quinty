/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DisputeResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISPUTE_STAKE_BPS"
      | "MIN_VOTING_STAKE"
      | "VOTING_DURATION"
      | "disputeCounter"
      | "disputes"
      | "getDispute"
      | "getVoteCount"
      | "hasVoted"
      | "initiateExpiryVote"
      | "initiatePengadilanDispute"
      | "isDisputeActive"
      | "owner"
      | "renounceOwnership"
      | "resolveDispute"
      | "transferOwnership"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeInitiated"
      | "DisputeResolved"
      | "OwnershipTransferred"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISPUTE_STAKE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_VOTING_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateExpiryVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiatePengadilanDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDisputeActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISPUTE_STAKE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_VOTING_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDispute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateExpiryVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiatePengadilanDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDisputeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace DisputeInitiatedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    bountyId: BigNumberish,
    initiatedBy: AddressLike,
    isExpiryVote: boolean
  ];
  export type OutputTuple = [
    disputeId: bigint,
    bountyId: bigint,
    initiatedBy: string,
    isExpiryVote: boolean
  ];
  export interface OutputObject {
    disputeId: bigint;
    bountyId: bigint;
    initiatedBy: string;
    isExpiryVote: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    winningSubmissionIds: BigNumberish[]
  ];
  export type OutputTuple = [disputeId: bigint, winningSubmissionIds: bigint[]];
  export interface OutputObject {
    disputeId: bigint;
    winningSubmissionIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    disputeId: BigNumberish,
    voter: AddressLike,
    stake: BigNumberish
  ];
  export type OutputTuple = [disputeId: bigint, voter: string, stake: bigint];
  export interface OutputObject {
    disputeId: bigint;
    voter: string;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DisputeResolver extends BaseContract {
  connect(runner?: ContractRunner | null): DisputeResolver;
  waitForDeployment(): Promise<this>;

  interface: DisputeResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISPUTE_STAKE_BPS: TypedContractMethod<[], [bigint], "view">;

  MIN_VOTING_STAKE: TypedContractMethod<[], [bigint], "view">;

  VOTING_DURATION: TypedContractMethod<[], [bigint], "view">;

  disputeCounter: TypedContractMethod<[], [bigint], "view">;

  disputes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint, bigint, boolean] & {
        bountyId: bigint;
        initiatedBy: string;
        isExpiryVote: boolean;
        amount: bigint;
        votingEnd: bigint;
        resolved: boolean;
      }
    ],
    "view"
  >;

  getDispute: TypedContractMethod<
    [_disputeId: BigNumberish],
    [
      [bigint, boolean, bigint, bigint, boolean, bigint] & {
        bountyId: bigint;
        isExpiryVote: boolean;
        amount: bigint;
        votingEnd: bigint;
        resolved: boolean;
        voteCount: bigint;
      }
    ],
    "view"
  >;

  getVoteCount: TypedContractMethod<
    [_disputeId: BigNumberish],
    [bigint],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [_disputeId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;

  initiateExpiryVote: TypedContractMethod<
    [_bountyId: BigNumberish, _slashAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initiatePengadilanDispute: TypedContractMethod<
    [_bountyId: BigNumberish],
    [void],
    "payable"
  >;

  isDisputeActive: TypedContractMethod<
    [_bountyId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [_disputeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_disputeId: BigNumberish, _rankedSubIds: BigNumberish[]],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISPUTE_STAKE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_VOTING_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputeCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "disputes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint, bigint, boolean] & {
        bountyId: bigint;
        initiatedBy: string;
        isExpiryVote: boolean;
        amount: bigint;
        votingEnd: bigint;
        resolved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDispute"
  ): TypedContractMethod<
    [_disputeId: BigNumberish],
    [
      [bigint, boolean, bigint, bigint, boolean, bigint] & {
        bountyId: bigint;
        isExpiryVote: boolean;
        amount: bigint;
        votingEnd: bigint;
        resolved: boolean;
        voteCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoteCount"
  ): TypedContractMethod<[_disputeId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [_disputeId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateExpiryVote"
  ): TypedContractMethod<
    [_bountyId: BigNumberish, _slashAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initiatePengadilanDispute"
  ): TypedContractMethod<[_bountyId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "isDisputeActive"
  ): TypedContractMethod<[_bountyId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<[_disputeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_disputeId: BigNumberish, _rankedSubIds: BigNumberish[]],
    [void],
    "payable"
  >;

  getEvent(
    key: "DisputeInitiated"
  ): TypedContractEvent<
    DisputeInitiatedEvent.InputTuple,
    DisputeInitiatedEvent.OutputTuple,
    DisputeInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "DisputeInitiated(uint256,uint256,address,bool)": TypedContractEvent<
      DisputeInitiatedEvent.InputTuple,
      DisputeInitiatedEvent.OutputTuple,
      DisputeInitiatedEvent.OutputObject
    >;
    DisputeInitiated: TypedContractEvent<
      DisputeInitiatedEvent.InputTuple,
      DisputeInitiatedEvent.OutputTuple,
      DisputeInitiatedEvent.OutputObject
    >;

    "DisputeResolved(uint256,uint256[])": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
